import logging
import openai
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime
from gtts import gTTS
from config import BOT_TOKEN, OPENAI_API_KEY

# –¢–æ–∫–µ–Ω–∏
openai.api_key = OPENAI_API_KEY

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
cursor.execute("""CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, language TEXT DEFAULT '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞', photo_limit INTEGER DEFAULT 100)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS history (user_id INTEGER, message TEXT, response TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS photo_requests (user_id INTEGER, photo_count INTEGER DEFAULT 0, last_reset DATETIME DEFAULT CURRENT_TIMESTAMP)""")
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def is_registered(user_id):
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
def register_user(user_id):
    cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("INSERT INTO photo_requests (user_id, photo_count) VALUES (?, ?)", (user_id, 0))
    conn.commit()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å—É
@dp.message_handler(commands=["voice"])
async def handle_voice_command(message: types.Message):
    if not is_registered(message.from_user.id):
        await message.reply("üîí –¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /register")
        return
    
    text = message.text[len("/voice "):].strip()
    if not text:
        await message.reply("üìå –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /voice, —ñ —è –∑—Ä–æ–±–ª—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    try:
        tts = gTTS(text=text, lang="uk")
        filename = f"voice_{message.from_user.id}.ogg"
        tts.save(filename)

        with open(filename, "rb") as voice_file:
            await message.reply_voice(voice_file)
        
        os.remove(filename)
    except Exception as e:
        await message.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É: {e}")

# –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
cursor.execute("""CREATE TABLE IF NOT EXISTS promo_codes (code TEXT PRIMARY KEY, reward TEXT)""")
conn.commit()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ —É –±–∞–∑—É (—è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ)
promo_codes = [
    ("FREE100", "–î–æ–¥–∞—Ç–∫–æ–≤—ñ 100 —Ñ–æ—Ç–æ –Ω–∞ –¥–µ–Ω—å!"),
    ("SECRET", "–°–µ–∫—Ä–µ—Ç–Ω–∏–π –±–æ–Ω—É—Å üòè"),
    ("SHAURMA", "–ó–Ω–∏–∂–∫–∞ –Ω–∞ —à–∞—É—Ä–º—É üåØ (–∞–ª–µ —Ü–µ –∂–∞—Ä—Ç!)")
]

for code, reward in promo_codes:
    cursor.execute("INSERT OR IGNORE INTO promo_codes (code, reward) VALUES (?, ?)", (code, reward))
conn.commit()

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /promo
@dp.message_handler(commands=["promo"])
async def handle_promo(message: types.Message):
    if not is_registered(message.from_user.id):
        await message.reply("üîí –¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /register")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.reply("üìå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /promo <–∫–æ–¥>")
        return

    code = args[1].upper()
    cursor.execute("SELECT reward FROM promo_codes WHERE code=?", (code,))
    result = cursor.fetchone()

    if result:
        reward = result[0]
        await message.reply(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! {reward}")
    else:
        await message.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if name == "__main__":
    executor.start_polling(dp, skip_updates=True)
